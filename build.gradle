plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.5'
    //id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'net.neoforged.gradle.mixin' version '[7.0.5,)'
}

version = "0.9.1"
group= "dev.gigaherz.jsonthings"

repositories {
    mavenLocal()
}

base {
    archivesName = "JsonThings-UNKNOWN"
}
project.afterEvaluate {
    base.archivesName = "JsonThings-1.20.2"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

repositories {
    maven {
        url 'https://repo.spongepowered.org/repository/maven-public/'
        content {
            includeGroup "org.spongepowered"
        }
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }


    /*
    flatDir {
        dirs project.rootProject.file("./debugmods")
    }
     */
}


mixin {
    config "jsonthings.mixins.json"
}

runs {
    // applies to all the run configs below
    configureEach {
        systemProperty 'forge.logging.markers', '' // 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        //ideaModule "${project.name}.main"

        workingDirectory project.file('run')

        //programArguments.addAll "--mixin=jsonthings.mixins.json"

        modSource project.sourceSets.main
    }

    client {
    }

    server {
    }
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

dependencies {
    implementation 'net.neoforged:neoforge:20.2.4-beta'

    //library 'com.google.guava:guava:21.0'
    //runtimeOnly fg.deobf("useless:Botania:1.18.2.433")
    //runtimeOnly fg.deobf("useless:curios-forge-1.18.2:5.0.7.0")
    //runtimeOnly fg.deobf("useless:Patchouli:1.18.2.69")

    compileOnly 'curse.maven:rhino-416294:4805923'

    /*library 'org.graalvm.regex:regex:22.0.0.2'
    library 'org.graalvm.sdk:graal-sdk:22.0.0.2'
    library 'org.graalvm.truffle:truffle-api:22.0.0.2'
    library 'org.graalvm.js:js:22.0.0.2'
    library 'org.graalvm.js:js-scriptengine:22.0.0.2'*/

    annotationProcessor 'org.spongepowered:mixin:0.8.+:processor'
}

jar {
    from('/') {
        include 'LICENSE.txt'
    }

    manifest {
        attributes([
                "Specification-Title": "eyes",
                "Specification-Vendor": "gigaherz",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" :"gigaherz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "jsonthings.mixins.json"
        ])
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

project.afterEvaluate {
    publish.dependsOn('build')
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId project.archivesBaseName
                from components.java

                //artifact sourceJar

                pom.withXml {
                    asNode().dependencies.dependency.each { dep ->
                        if (dep.version.last().value().last().contains("mapped")) {
                            assert dep.parent().remove(dep)
                        }
                    }
                }
            }
        }

        repositories {
            if (findProperty("RELEASE") && System.env.giga_maven_host != null) {
                System.out.println("Remote publish enabled on " + System.env.giga_maven_host)
                maven {
                    url System.env.giga_maven_host
                    credentials {
                        username System.env.giga_maven_user
                        password System.env.giga_maven_password
                    }
                }
            }
            else {
                System.out.println("Remote publish disabled.")
                maven {
                    url "$projectDir/../CommonMaven"
                }
            }
        }
    }
}
